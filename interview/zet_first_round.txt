Rotate a matrix by 90 degree in clockwise direction without using any extra space 


[]
Input:
1 2 3 
4 5 6
7 8 9  
Output:
7 4 1 
8 5 2
9 6 3

Input:
1 2
3 4
Output:
3 1
4 2

00 01 02
10 11 12
20 21 22
f(i,j) -> (x,y)
i_new = j 
j_new = N - i - 1 
N=3, M=3
00 -> 02
01 -> 12
02 -> 22
10 -> 01
11 -> 11
12 -> 21
20 -> 00
21 -> 10
22 -> 20


-7 -4 -1 
 -8 -5 -2
-9 -6 -3


#include <bits/stdc++.h>
using namespace std;
// Assumption: only natural number are there in matrix
vector<int> rotatedIndexes(int i, int j, int n, int m){
    int new_i = j;
    int new_j = n - i - 1;
    vector<int> new_ij = {new_i, new_j};
    return new_ij;
}

void rotateElement(int i, int j, vector<vector<int>>& mat, int di, int dj, bool skip, int ele){
    if(i == di && j == dj && skip == false){
        return;
    }
    int n = mat.size();
    int m = mat[0].size();
    vector<int> new_ij = rotatedIndexes(i, j, n, m);
    int new_i = new_ij[0];
    int new_j = new_ij[1];
    
    int existing_element = mat[new_i][new_j];
    mat[new_i][new_j] = abs(ele) * -1;
    if(existing_element > 0){
        rotateElement(new_i, new_j, mat, di, dj, false, existing_element);
    }
}

void rotateMatrix(vector<vector<int>>& mat){
    
    int n = mat.size();
    int m = mat[0].size();
    
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            if(mat[i][j] > 0){
                rotateElement(i, j, mat, i, j, true, mat[i][j]);
            }
        }
    }
}

int main(){
    vector<vector<int>> mat = {{1,2,3},{4,5,6},{7,8,9}};
    rotateMatrix(mat);
    int n = mat.size();
    int m = mat[0].size();
    for(int i=0; i<n; i++){
        for(int j=0; j<m; j++){
            cout<<mat[i][j]<<" ";
        }
        cout<<endl;
    }
    
    
}


